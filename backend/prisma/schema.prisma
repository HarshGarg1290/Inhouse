generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(uuid())
  fullName        String
  email           String  @unique
  phoneNumber     String  @unique
  password        String
  streetAddress   String
  city            String
  state           String
  pincode         String
  panNumber       String  @unique
  aadharNumber    String  @unique
  panProofUrl     String
  aadharProofUrl  String
  verificationStatus String @default("PENDING")
  createdAt       DateTime @default(now())
  rating          Float   @default(5.0)
  

  rides           Ride[]    // Rides the user has created
  vehicles        Vehicle[] // Vehicles saved for future use
  bookings        RideBooking[]
}

model Ride {
  id             String   @id @default(uuid())
  driverId       String
  driver         User     @relation(fields: [driverId], references: [id])
  startLocation  String
  startLat       Float
  startLng       Float
  destination    String
  destLat        Float
  destLng        Float
  dateTime       DateTime
  seats          Int
  price          Float
  vehicle        Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId      String?
  preferences    Preferences?
  createdAt      DateTime @default(now())
  bookings       RideBooking[]
}


model Vehicle {
  id          String  @id @default(uuid())
  driverId    String
  driver      User    @relation(fields: [driverId], references: [id])
  model       String
  color       String
  plate       String  @unique
  rides       Ride[]  // This vehicle can be used in multiple rides
}

model Preferences {
  id             String  @id @default(uuid())
  rideId         String  @unique
  ride           Ride    @relation(fields: [rideId], references: [id])
  verifiedRiders Boolean
  sameGender     Boolean
  nonSmoking     Boolean
  ecoFriendly    Boolean
  allowPets      Boolean
  quietRide      Boolean
}

model RideBooking {
  id          String   @id @default(uuid())
  rideId      String
  ride        Ride     @relation(fields: [rideId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  seats       Int      @default(1)
  status      String   @default("PENDING") // PENDING, CONFIRMED, CANCELLED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
